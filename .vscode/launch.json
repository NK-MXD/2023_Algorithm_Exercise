{
    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "g++.exe build and debug active file", // 配置名称，将会在启动配置的下拉菜单中显示
            "type": "cppdbg", // 配置类型，cppdbg对应cpptools提供的调试功能；可以认为此处只能是cppdbg
            "request": "launch", // 请求配置类型，可以为launch（启动）或attach（附加）
            "program": "${fileDirname}\\${fileBasenameNoExtension}.exe", // 将要进行调试的程序的路径
            "args": [], // 程序调试时传递给程序的命令行参数，一般设为空即可
            "stopAtEntry": false, // 设为true时程序将暂停在程序入口处，相当于在main上打断点
            "cwd": "${workspaceFolder}", // 目标的工作目录
            "environment": [], // 要添加到程序环境的环境变量。示例: [ { "name": "squid", "value": "clam" } ]。
            "externalConsole": false, // 如果为 true，则为调试对象启动控制台即会有小黑框。如果为 false，它在 Linux 和 Windows 上会显示在集成控制台中。
            "MIMode": "gdb", // 指示 MIDebugEngine 要连接到的控制台调试程序。允许的值为 "gdb"、"lldb"。
            "miDebuggerPath": "gdb.exe", // MI 调试程序(如 gdb)的路径。如果未指定，将首先在路径中搜索调试程序。
            "setupCommands": [
                {    // 模板自带，可以更好地显示STL容器的内容
                    "description": "为 gdb 启用整齐打印",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "g++.exe build active file" // 调试会话开始前执行的任务，一般为编译程序.g++.exe build active file与tasks中的同名任务对应，即在调试前会执行tasks中的这个任务
        }
    ]
}